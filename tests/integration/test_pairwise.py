# encoding: utf-8
# pylint: disable=protected-access

"""Integration tests for pairwise comparisons."""

from unittest import TestCase
import pytest

import numpy as np

from cr.cube.crunch_cube import CrunchCube
from cr.cube.measures.pairwise_pvalues import PairwiseSignifficance

from ..fixtures import CR


# pylint: disable=missing-docstring, invalid-name, no-self-use
class TestStandardizedResiduals(TestCase):
    """Test cr.cube implementation of column family pairwise comparisons"""

    def test_mr_x_cat_residuals(self):
        chisq_rows = [
            [
                [0, 4.78503197, 23.86449342, 19.31421254, 23.22900293, 12.22179566],
                [4.78503197, 0.0, 7.98474636, 5.2086202, 7.59422422, 2.67476803],
                [23.86449342, 7.98474636, 0.0, 0.38410967, 0.00496379, 0.29570511],
                [19.31421254, 5.2086202, 0.38410967, 0.0, 0.29805635, 0.01782463],
                [23.22900293, 7.59422422, 0.00496379, 0.29805635, 0.0, 0.24715461],
                [12.22179566, 2.67476803, 0.29570511, 0.01782463, 0.24715461, 0.0],
            ],
            [
                [0.0, 0.00066479, 0.00082446, 0.74758493, 1.23711308, 0.0050688],
                [0.00066479, 0.0, 0.00666948, 1.49209171, 2.48290654, 0.00335435],
                [0.00082446, 0.00666948, 0.0, 2.59397955, 4.62633098, 0.01916237],
                [0.74758493, 1.49209171, 2.59397955, 0.0, 0.1780604, 1.26597337],
                [1.23711308, 2.48290654, 4.62633098, 0.1780604, 0.0, 2.03470742],
                [0.0050688, 0.00335435, 0.01916237, 1.26597337, 2.03470742, 0.0],
            ],
            [
                [0.0, 2.59881692, 2.25906878, 1.35337047, 1.4880658, 0.59888122],
                [2.59881692, 0.0, 0.20143432, 0.75290712, 0.72974779, 0.97118359],
                [2.25906878, 0.20143432, 0.0, 0.4000099, 0.37901277, 0.62297838],
                [1.35337047, 0.75290712, 0.4000099, 0.0, 0.00469231, 0.13149172],
                [1.4880658, 0.72974779, 0.37901277, 0.00469231, 0.0, 0.17637956],
                [0.59888122, 0.97118359, 0.62297838, 0.13149172, 0.17637956, 0.0],
            ],
            [
                [0.0, 0.48648807, 4.79865276, 3.4685537, 5.60653209, 1.70357812],
                [0.48648807, 0.0, 4.40668014, 2.5187449, 5.53270073, 0.65267965],
                [4.79865276, 4.40668014, 0.0, 0.43229295, 0.25220806, 0.98106702],
                [3.4685537, 2.5187449, 0.43229295, 0.0, 1.14005182, 0.30377027],
                [5.60653209, 5.53270073, 0.25220806, 1.14005182, 0.0, 1.57378323],
                [1.70357812, 0.65267965, 0.98106702, 0.30377027, 1.57378323, 0.0],
            ],
            [
                [0, 0.00174029441, 0.439666410, 0.363757628, 0.458215420, 1.34507712],
                [0.00174029441, 0, 0.993856167, 0.563864660, 0.741335101, 2.47662389],
                [0.439666410, 0.993856167, 0, 6.42858183, 8.18781358, 1.01511535],
                [0.363757628, 0.563864660, 6.42858183, 0, 0.0136810217, 8.05927846],
                [0.458215420, 0.741335101, 8.18781358, 0.0136810217, 0, 9.35787173],
                [1.34507712, 2.47662389, 1.01511535, 8.05927846, 9.35787173, 0],
            ],
        ]
        expected = [np.array(chisq) for chisq in chisq_rows]
        cube = CrunchCube(CR.NORDIC_X_SHAPES)
        actual = PairwiseSignifficance._factory(
            cube.slices[0], axis=0, weighted=True
        )._pairwise_chisq
        for i in range(len(actual)):
            np.testing.assert_almost_equal(actual[i], expected[i])

    def test_same_col_counts(self):
        """Test statistics for columns that are all the same."""
        cube = CrunchCube(CR.SAME_COUNTS_3x4)
        pairwise_pvalues = PairwiseSignifficance._factory(
            cube.slices[0], axis=0, weighted=True
        )
        expected = np.zeros([4, 4])
        actual = pairwise_pvalues._pairwise_chisq
        np.testing.assert_equal(actual, expected)

    def test_hirotsu_chisq(self):
        """Test statistic for hirotsu data matches R"""
        cube = CrunchCube(CR.PAIRWISE_HIROTSU_ILLNESS_X_OCCUPATION)
        pairwise_pvalues = PairwiseSignifficance._factory(
            cube.slices[0], axis=0, weighted=True
        )
        expected = np.array(
            [
                [
                    0.0,
                    2.821910158116655,
                    0.9259711818781733,
                    12.780855448128131,
                    16.79727869630099,
                    0.924655442873681,
                    0.8008976269312448,
                    9.616972398702428,
                    1.4496863124510315,
                    18.556098937181705,
                ],
                [
                    2.821910158116655,
                    0.0,
                    1.6831132737959318,
                    8.683471852181562,
                    13.451053159265136,
                    0.38467827774871005,
                    1.5094961530071807,
                    9.081312924348003,
                    0.25833985406056126,
                    16.3533306337074,
                ],
                [
                    0.9259711818781733,
                    1.6831132737959318,
                    0.0,
                    24.348935423464653,
                    46.689386077899826,
                    0.18470822825752797,
                    1.376598707986204,
                    22.063658540387774,
                    1.0102118795109807,
                    47.62124004565971,
                ],
                [
                    12.780855448128131,
                    8.683471852181562,
                    24.348935423464653,
                    0.0,
                    0.8073979083263744,
                    8.490641259215641,
                    5.141740694105387,
                    1.2536004848874829,
                    3.576241745092247,
                    2.1974561987876613,
                ],
                [
                    16.79727869630099,
                    13.451053159265136,
                    46.689386077899826,
                    0.8073979083263744,
                    0.0,
                    11.792012011326468,
                    6.847609367845222,
                    0.743555569450378,
                    5.218390456727495,
                    0.725476017865348,
                ],
                [
                    0.924655442873681,
                    0.38467827774871005,
                    0.18470822825752797,
                    8.490641259215641,
                    11.792012011326468,
                    0.0,
                    0.7072537831958036,
                    7.620018353425002,
                    0.3321969685319031,
                    14.087591553810693,
                ],
                [
                    0.8008976269312448,
                    1.5094961530071807,
                    1.376598707986204,
                    5.141740694105387,
                    6.847609367845222,
                    0.7072537831958036,
                    0.0,
                    3.6724354409467352,
                    0.39674326208673527,
                    8.546159019524978,
                ],
                [
                    9.616972398702428,
                    9.081312924348003,
                    22.063658540387774,
                    1.2536004848874829,
                    0.743555569450378,
                    7.620018353425002,
                    3.6724354409467352,
                    0.0,
                    3.4464292421171003,
                    1.5916695633869193,
                ],
                [
                    1.4496863124510315,
                    0.25833985406056126,
                    1.0102118795109807,
                    3.576241745092247,
                    5.218390456727495,
                    0.3321969685319031,
                    0.39674326208673527,
                    3.4464292421171003,
                    0.0,
                    6.85424450468994,
                ],
                [
                    18.556098937181705,
                    16.3533306337074,
                    47.62124004565971,
                    2.1974561987876613,
                    0.725476017865348,
                    14.087591553810693,
                    8.546159019524978,
                    1.5916695633869193,
                    6.85424450468994,
                    0.0,
                ],
            ]
        )
        actual = pairwise_pvalues._pairwise_chisq
        np.testing.assert_almost_equal(actual, expected)

    def test_same_col_pvals(self):
        """P-values for columns that are all the same."""
        cube = CrunchCube(CR.SAME_COUNTS_3x4)
        expected = [np.ones([4, 4])]
        actual = cube.pairwise_pvals(axis=0)
        np.testing.assert_equal(actual, expected)

        # Assert correct exception in case of not-implemented direction
        with pytest.raises(NotImplementedError):
            cube.pairwise_pvals(axis=1)

    def test_hirotsu_pvals(self):
        cube = CrunchCube(CR.PAIRWISE_HIROTSU_ILLNESS_X_OCCUPATION)
        actual = cube.pairwise_pvals(axis=0)
        expected = [
            np.array(
                [
                    1,
                    0.999603716443816,
                    0.99999993076784,
                    0.435830186989942,
                    0.171365670494448,
                    0.999999931581745,
                    0.999999979427862,
                    0.726740806122402,
                    0.999997338047414,
                    0.105707739899106,
                    0.999603716443816,
                    1,
                    0.999991395396033,
                    0.806407150042716,
                    0.380296648898666,
                    0.999999999961875,
                    0.999996333717649,
                    0.773583582093158,
                    0.999999999998836,
                    0.192375246184738,
                    0.99999993076784,
                    0.999991395396033,
                    1,
                    0.017277623171216,
                    3.29012189337341e-06,
                    0.99999999999994,
                    0.999998237045896,
                    0.0365273119329589,
                    0.999999857555538,
                    2.23456306602809e-06,
                    0.435830186989942,
                    0.806407150042716,
                    0.017277623171216,
                    1,
                    0.999999977981595,
                    0.821586701043061,
                    0.982573114952466,
                    0.999999169027016,
                    0.998041030837588,
                    0.999934687968906,
                    0.171365670494448,
                    0.380296648898666,
                    3.29012189337341e-06,
                    0.999999977981595,
                    1,
                    0.52406354520284,
                    0.926322806048378,
                    0.99999998900118,
                    0.981100354607917,
                    0.999999991067971,
                    0.999999931581745,
                    0.999999999961875,
                    0.99999999999994,
                    0.821586701043061,
                    0.52406354520284,
                    1,
                    0.999999992799126,
                    0.883025655503086,
                    0.99999999998941,
                    0.33149560264078,
                    0.999999979427862,
                    0.999996333717649,
                    0.999998237045896,
                    0.982573114952466,
                    0.926322806048378,
                    0.999999992799126,
                    1,
                    0.997674862917282,
                    0.99999999995011,
                    0.81726901111794,
                    0.726740806122402,
                    0.773583582093158,
                    0.0365273119329589,
                    0.999999169027016,
                    0.99999998900118,
                    0.883025655503086,
                    0.997674862917282,
                    1,
                    0.998461227115608,
                    0.999994436499243,
                    0.999997338047414,
                    0.999999999998836,
                    0.999999857555538,
                    0.998041030837588,
                    0.981100354607917,
                    0.99999999998941,
                    0.99999999995011,
                    0.998461227115608,
                    1,
                    0.925999125959122,
                    0.105707739899106,
                    0.192375246184738,
                    2.23456306602809e-06,
                    0.999934687968906,
                    0.999999991067971,
                    0.33149560264078,
                    0.81726901111794,
                    0.999994436499243,
                    0.925999125959122,
                    1,
                ]
            ).reshape(10, 10)
        ]
        np.testing.assert_almost_equal(actual, expected)

    def test_hirotsu_pvals_with_hs(self):
        """The shape of the result should be 11 x 11, with H&S (at index 5)."""
        cube = CrunchCube(CR.PAIRWISE_HIROTSU_ILLNESS_X_OCCUPATION_WITH_HS)
        expected = [
            np.array(
                [
                    1,
                    0.999603716443816,
                    0.99999993076784,
                    0.435830186989942,
                    0.171365670494448,
                    np.nan,
                    0.999999931581745,
                    0.999999979427862,
                    0.726740806122402,
                    0.999997338047414,
                    0.105707739899106,
                    0.999603716443816,
                    1,
                    0.999991395396033,
                    0.806407150042716,
                    0.380296648898666,
                    np.nan,
                    0.999999999961875,
                    0.999996333717649,
                    0.773583582093158,
                    0.999999999998836,
                    0.192375246184738,
                    0.99999993076784,
                    0.999991395396033,
                    1,
                    0.017277623171216,
                    3.29012189337341e-06,
                    np.nan,
                    0.99999999999994,
                    0.999998237045896,
                    0.0365273119329589,
                    0.999999857555538,
                    2.23456306602809e-06,
                    0.435830186989942,
                    0.806407150042716,
                    0.017277623171216,
                    1,
                    0.999999977981595,
                    np.nan,
                    0.821586701043061,
                    0.982573114952466,
                    0.999999169027016,
                    0.998041030837588,
                    0.999934687968906,
                    0.171365670494448,
                    0.380296648898666,
                    3.29012189337341e-06,
                    0.999999977981595,
                    1,
                    np.nan,
                    0.52406354520284,
                    0.926322806048378,
                    0.99999998900118,
                    0.981100354607917,
                    0.999999991067971,
                    np.nan,
                    np.nan,
                    np.nan,
                    np.nan,
                    np.nan,
                    np.nan,
                    np.nan,
                    np.nan,
                    np.nan,
                    np.nan,
                    np.nan,
                    0.999999931581745,
                    0.999999999961875,
                    0.99999999999994,
                    0.821586701043061,
                    0.52406354520284,
                    np.nan,
                    1,
                    0.999999992799126,
                    0.883025655503086,
                    0.99999999998941,
                    0.33149560264078,
                    0.999999979427862,
                    0.999996333717649,
                    0.999998237045896,
                    0.982573114952466,
                    0.926322806048378,
                    np.nan,
                    0.999999992799126,
                    1,
                    0.997674862917282,
                    0.99999999995011,
                    0.81726901111794,
                    0.726740806122402,
                    0.773583582093158,
                    0.0365273119329589,
                    0.999999169027016,
                    0.99999998900118,
                    np.nan,
                    0.883025655503086,
                    0.997674862917282,
                    1,
                    0.998461227115608,
                    0.999994436499243,
                    0.999997338047414,
                    0.999999999998836,
                    0.999999857555538,
                    0.998041030837588,
                    0.981100354607917,
                    np.nan,
                    0.99999999998941,
                    0.99999999995011,
                    0.998461227115608,
                    1,
                    0.925999125959122,
                    0.105707739899106,
                    0.192375246184738,
                    2.23456306602809e-06,
                    0.999934687968906,
                    0.999999991067971,
                    np.nan,
                    0.33149560264078,
                    0.81726901111794,
                    0.999994436499243,
                    0.925999125959122,
                    1,
                ]
            ).reshape(11, 11)
        ]
        actual = cube.pairwise_pvals(axis=0)
        np.testing.assert_almost_equal(actual, expected)

    def test_odd_latent_dimensions(self):
        """Test code path for the pfaffian of an odd-dimensioned matrix
        Latent matrix size is (n_min - 1) so 3 for a 4x4 table.
        """
        cube = CrunchCube(CR.PAIRWISE_4X4)
        actual = cube.pairwise_pvals(axis=0)
        expected = [
            np.array(
                [
                    1,
                    0.949690252544668,
                    0.917559534718816,
                    0.97630069244232,
                    0.949690252544668,
                    1,
                    0.35511045473507,
                    0.999999119644564,
                    0.917559534718816,
                    0.35511045473507,
                    1,
                    0.313869429972919,
                    0.97630069244232,
                    0.999999119644564,
                    0.313869429972919,
                    1,
                ]
            ).reshape(4, 4)
        ]
        np.testing.assert_almost_equal(actual, expected)

    def test_pairwise_with_zero_margin(self):
        """Assert pairwise doesn't break when a 0 value is in any slice margin.

        We currently don't know the correct maths behind this. This test needs to be
        updated once we figure this out.
        """
        cube = CrunchCube(CR.PAIRWISE_WITH_ZERO_MARGIN)

        # TODO: Replace with updated expectation when maths is figured out
        expected = [np.ones((10, 10), dtype=float)]

        actual = cube.pairwise_pvals(axis=0)
        np.testing.assert_almost_equal(actual, expected)

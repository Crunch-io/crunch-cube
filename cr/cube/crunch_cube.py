from __future__ import division
import json

import numpy as np

from cr.cube.dimension import Dimension


class CrunchCube(object):

    def __init__(self, response):
        # @cube: Represents the cube response object, as generated by
        # the zz9d cube factory.

        # Cube can come in as a JSON or as a dictionary, So we need to check
        # its type, and convert it to a dictionary if it's JSON, if possible.
        if isinstance(response, str):
            response = json.loads(response)

        # If conversion to dict is not possible, or an unexpected type is
        # provided, fail sooner rather than later.
        if not isinstance(response, dict):
            raise TypeError((
                'Unsupported type provided: {}. '
                'A `cube` must be JSON or `dict`.'
            ).format(type(response)))

        self._cube = response['value']

    @classmethod
    def _get_dimensions(cls, cube):
        '''Gets the dimensions of the crunch cube.'''
        return [Dimension(entry) for entry in cube['result']['dimensions']]


    # API Functions

    @property
    def dimensions(self):
        return self._get_dimensions(self._cube)

    def as_array(self, include_missing=False):
        counts = self._cube['result']['counts']
        shape = [len(dim.elements) for dim in self.dimensions]
        valid_indices = [dim.valid_indices(include_missing)
                         for dim in self.dimensions]
        res = np.array(counts).reshape(shape)[np.ix_(*valid_indices)]
        return res

    def margin(self, axis=None):
        return np.sum(self.as_array(), axis)

    def proportions(self, axis=None):
        margin = self.margin(axis)
        if axis == 1:
            margin = margin[:, np.newaxis]
        return self.as_array() / margin

    def percentages(self, axis=None):
        return self.proportions(axis) * 100
